openapi: 3.0.0
info:
  title: Music API
  version: 1.0.0
  description: API for managing music tracks, artists, albums and related information

servers:
  - url: http://localhost:3000/api/v1

paths:
  /tracks:
    get:
      tags: [ Tracks ]
      summary: Get all tracks
      parameters:
        - in: query
          name: limit
          schema: { type: integer, default: 20 }
        - in: query
          name: offset
          schema: { type: integer, default: 0 }
      responses:
        200:
          description: List of tracks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'

  /tracks/{id}:
    get:
      tags: [ Tracks ]
      summary: Get track by ID
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        200:
          description: Track details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'

  /albums:
    get:
      tags: [ Albums ]
      summary: Get all albums
      parameters:
        - in: query
          name: limit
          schema: { type: integer, default: 20 }
        - in: query
          name: offset
          schema: { type: integer, default: 0 }
      responses:
        200:
          description: List of albums
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'

  /albums/{id}:
    get:
      tags: [ Albums ]
      summary: Get album by ID
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        200:
          description: Album details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'

  /artists:
    get:
      tags: [ Artists ]
      summary: Get all artists
      parameters:
        - in: query
          name: limit
          schema: { type: integer, default: 20 }
        - in: query
          name: offset
          schema: { type: integer, default: 0 }
      responses:
        200:
          description: List of artists
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artist'

  /artists/{id}:
    get:
      tags: [ Artists ]
      summary: Get artist by ID
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        200:
          description: Artist details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'

  /producers:
    get:
      tags: [ Producers ]
      summary: Get all producers
      parameters:
        - in: query
          name: limit
          schema: { type: integer, default: 20 }
        - in: query
          name: offset
          schema: { type: integer, default: 0 }
      responses:
        200:
          description: List of producers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Producer'

  /producers/{id}:
    get:
      tags: [ Producers ]
      summary: Get producer by ID
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        200:
          description: Producer details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Producer'

  /tracks/{id}/musical-info:
    get:
      tags: [ Tracks ]
      summary: Get musical info of a track
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        200:
          description: Musical info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MusicalInfo'

  /tracks/{id}/stats:
    get:
      tags: [ Tracks ]
      summary: Get stats of a track
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        200:
          description: Track statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stats'

  /artists/{id}/tracks:
    get:
      tags: [ Artists ]
      summary: Get tracks by artist
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
        - in: query
          name: limit
          schema: { type: integer, default: 20 }
        - in: query
          name: offset
          schema: { type: integer, default: 0 }
      responses:
        200:
          description: List of tracks by artist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'

  /tracks/genre/{genre}:
    get:
      tags: [ Tracks ]
      summary: Get tracks by genre
      parameters:
        - in: path
          name: genre
          required: true
          schema: { type: string }
        - in: query
          name: limit
          schema: { type: integer, default: 20 }
        - in: query
          name: offset
          schema: { type: integer, default: 0 }
      responses:
        200:
          description: List of tracks by genre
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'

  /albums/{id}/tracks:
    get:
      tags: [ Albums ]
      summary: Get tracks from album
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
        - in: query
          name: limit
          schema: { type: integer, default: 20 }
        - in: query
          name: offset
          schema: { type: integer, default: 0 }
      responses:
        200:
          description: List of tracks from album
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'

  /producers/{id}/tracks:
    get:
      tags: [ Producers ]
      summary: Get tracks by producer
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
        - in: query
          name: limit
          schema: { type: integer, default: 20 }
        - in: query
          name: offset
          schema: { type: integer, default: 0 }
      responses:
        200:
          description: List of tracks by producer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'

components:
  schemas:
    Track:
      type: object
      properties:
        id: { type: string }
        title: { type: string }
        isrc: { type: string }
        duration: { type: string }
        bpm: { type: integer }
        language: { type: string }
        releaseYear: { type: integer }
        key: { type: string }
        energyLevel: { type: string }
        mood: { type: string }

    Artist:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        spotifyId: { type: string }
        country: { type: string }
        type: { type: string, enum: [ solo, band ] }

    Album:
      type: object
      properties:
        id: { type: string }
        title: { type: string }
        releaseDate: { type: string, format: date }
        totalTracks: { type: integer }
        label: { type: string }
        distribution: { type: string }

    Producer:
      type: object
      properties:
        id: { type: string }
        name: { type: string }

    Stats:
      type: object
      properties:
        streams: { type: integer, format: int64 }
        likes: { type: integer }
        shares: { type: integer }
        downloads: { type: integer }
        peakPosition: { type: integer }
        weeklyTrend: { type: string }

    MusicalInfo:
      type: object
      properties:
        instruments: { type: array, items: { type: string } }
        style: { type: string }
        key: { type: string }
        energyLevel: { type: string }
        mood: { type: string }
